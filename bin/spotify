#!/usr/bin/env python2
# coding: utf-8

import base64
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import os
import subprocess
import sys
import threading
import time
import re
import urllib2
from gi.repository import GLib

ALBUM_ART_TIMEOUT = 3

spotify_bin = "/usr/bin/spotify"


class Handler(object):
  """An abstract handler class.
  Handlers should implement __init__(session_bus) and shutdown()."""
  def __init__(self, session_bus):
    raise NotImplementedError("Handlers must implement __init__.")

  def shutdown(self):
    raise NotImplementedError("Handlers must implement shutdown.")


class MediaKeysHandler(Handler):
    def __init__(self, session_bus):
        print "Finding Spotify..."
        spotify_bus = session_bus.get_object("org.mpris.MediaPlayer2.spotify",
                                             "/org/mpris/MediaPlayer2")
        self.spotify = dbus.Interface(spotify_bus,
                                      "org.mpris.MediaPlayer2.Player")

        print "Connect to MediaKeys..."
        bus = session_bus.get_object("org.gnome.SettingsDaemon",
                                          "/org/gnome/SettingsDaemon/MediaKeys")
        bus.connect_to_signal("MediaPlayerKeyPressed",
                              self.key_pressed)
        self.mediakeys = dbus.Interface(bus,
                                        "org.gnome.SettingsDaemon.MediaKeys")
        self.mediakeys.GrabMediaPlayerKeys("Spotify", time.time())

    def shutdown(self):
        self.mediakeys.ReleaseMediaPlayerKeys("Spotify")

    def key_pressed(self, *keys):
        print "Received MediaPlayerKeyPressed:"
        print "  " + repr(keys)

        if self.spotify:
            for key in keys:
                if key == "":
                    pass

                elif key == "Play":
                    self.spotify.PlayPause()

                elif key == "Stop":
                    self.spotify.Stop()

                elif key == "Next":
                    self.spotify.Next()

                elif key == "Previous":
                    self.spotify.Previous()


class CurrentSongHandler(object):
    """Mixin used to connect to the session bus and update self.current_song on properties_changed.
    Handlers using this mixin must implement current_song_changed(self)."""
    def __init__(self, session_bus):
        self.current_song = {}

        print "Connecting to PropertiesChanged..."

        bus = session_bus.get_object("org.mpris.MediaPlayer2.spotify",
                                          "/org/mpris/MediaPlayer2")
        bus.connect_to_signal("PropertiesChanged",
                              self.properties_changed)

    def properties_changed(self, interface_name, changed_properties, invalid_properties):
        print "Received PropertiesChanged:"
        print "  " + repr(changed_properties)

        if 'Metadata' in changed_properties:
            try:
                self.current_song['artist'] = changed_properties['Metadata']['xesam:artist'][0].encode('utf-8')
                self.current_song['album'] = changed_properties['Metadata']['xesam:album'].encode('utf-8')
                self.current_song['title'] = changed_properties['Metadata']['xesam:title'].encode('utf-8')
                self.current_song['year'] = str(changed_properties['Metadata']['xesam:contentCreated'][:4])
                self.current_song['albumArt'] = changed_properties['Metadata']['mpris:artUrl'].encode('utf-8')
            except KeyError:
                print "Didn't get expected metadata"

        if 'PlaybackStatus' in changed_properties:
            self.current_song['playback_status'] = changed_properties['PlaybackStatus']

        self.current_song_changed()

    def current_song_changed(self):
        raise NotImplementedError("CurrentSongHandlers must implement current_song_changed(self)")


class NotificationsHandler(Handler, CurrentSongHandler):
    def __init__(self, session_bus):
        CurrentSongHandler.__init__(self, session_bus)

        self.notification_lock = threading.Lock()

        print "Creating notification..."
        Notify.init("spotify-gnome")
        self.notification = Notify.Notification.new("Spotify Gnome", None, None)

        print "Setting up temp directory"
        self.cache_dir = os.path.join(GLib.get_user_cache_dir(), 'spotify-gnome')
        if not os.path.isdir(self.cache_dir):
            os.mkdir(self.cache_dir);

    def current_song_changed(self):
        title = self.current_song['title']
        body = "{0}\n{1} ({2})".format(self.current_song['artist'], self.current_song['album'], self.current_song['year'])
        icon = "media-playback-start"

        if 'playback_status' in self.current_song:
            if self.current_song['playback_status'] == 'Paused':
                title = "Paused"
                body = None
                icon = "media-playback-pause"
            if self.current_song['playback_status'] == 'Stopped':
                title = "Stopped"
                body = None
                icon = "media-playback-stop"

        with self.notification_lock:
            self.notification.update(title, body, icon)
            self.notification.show()

        if body:
            FetchAndUpdateCoverIcon(self.notification,
                                    self.current_song['albumArt'],
                                    self.current_song['album'],
                                    title, body,
                                    self.notification_lock).start()

    def shutdown(self):
        self.notification.close()
        Notify.uninit()


class FetchAndUpdateCoverIcon(threading.Thread):
    def __init__(self, notification, icon_url, album_name, title, body, notification_lock):
        threading.Thread.__init__(self)

        self.notification = notification
        self.icon_url = icon_url
        self.icon_name = base64.urlsafe_b64encode(album_name) + ".png"
        self.title = title
        self.body = body
        self.notification_lock = notification_lock
        self.name = "FetchAndUpdateCoverIcon-%f" % time.time()

        self.cache_dir = os.path.join(GLib.get_user_cache_dir(), 'spotify-gnome')

    def run(self):
        if not os.path.isdir(self.cache_dir):
            os.mkdir(self.cache_dir)

        try:
            icon_path = os.path.join(self.cache_dir, self.icon_name)
            if not os.path.isfile(icon_path):
                result = urllib2.urlopen(self.icon_url, None, ALBUM_ART_TIMEOUT)
                with open(icon_path, "w") as icon_file:
                    icon_file.write(result.read())
            icon = icon_path
        except Exception as e:
            print(e)
            print "URL was: " + self.icon_url
            icon = "media-playback-start"

        for thread in threading.enumerate():
            try:
                current_name, current_time = threading.current_thread().name.split("-")
                thread_name, thread_time = thread.name.split("-")
            except ValueError:
                continue
            if current_name == thread_name and float(current_time) < float(thread_time):
                return

        with self.notification_lock:
            self.notification.update(self.title, self.body, icon)
            self.notification.show()


class TelepathyHandler(Handler, CurrentSongHandler):
    def __init__(self, session_bus):
        CurrentSongHandler.__init__(self, session_bus)
        print "Connecting to Telepathy..."
        try:
            account_manager = session_bus.get_object('org.freedesktop.Telepathy.AccountManager',
                                                '/org/freedesktop/Telepathy/AccountManager')
            accounts = account_manager.Get('org.freedesktop.Telepathy.AccountManager',
                                               'ValidAccounts')
            self.ENABLE_TELEPATHY = True
            if accounts:
                self.account_list = []
                for account in accounts:
                    account = session_bus.get_object('org.freedesktop.Telepathy.AccountManager',
                                             str(account))
                    presence, status, message = account.Get('org.freedesktop.Telepathy.Account',
                                                       'CurrentPresence')
                    self.account_list.append((account, presence, status, message))
            else:
                print "No valid accounts found ,disabling Telepathy"
                self.ENABLE_TELEPATHY = False
        except:
            print "Couldn't connect to DBUS Object ,disabling Telepathy"
            self.ENABLE_TELEPATHY = False



    def current_song_changed(self):
        if self.ENABLE_TELEPATHY:
            status_content = 'Spotify : ' + self.current_song["title"] + ' - ' + self.current_song["artist"]
            status = "♫ ".decode('utf8') + status_content + " ♫".decode('utf8')
            if 'playback_status' in self.current_song:
                if self.current_song['playback_status'] in ['Paused', 'Stopped']:
                    status = 'default'

            for account in self.account_list:
                if status == 'default':
                    status = account[3]
                else:
                    status = dbus.String(unicode(status))
                account[0].Set('org.freedesktop.Telepathy.Account', 'RequestedPresence',
                                dbus.Struct((account[1], account[2], status),
                                signature=None, variant_level=1),
                                dbus_interface='org.freedesktop.DBus.Properties')

    def shutdown(self):
        pass


class SpotifyGnome(object):
    def __init__(self, handlers=[]):
        pid = os.fork()

        if pid == 0:
            time.sleep(1)
            print "Launching Spotify..."
            args = [spotify_bin] + sys.argv[1:]
            print " ".join(args)
            os.execv(spotify_bin, args)

        else:
            self.handler_classes = handlers
            self.handlers = []

            print "Setting up DBus..."
            bus_loop = DBusGMainLoop(set_as_default=True)
            self.session_bus = dbus.SessionBus(mainloop=bus_loop)

            print "Connecting to NameOwnerChanged..."
            bus = self.session_bus.get_object("org.freedesktop.DBus",
                                              "/org/freedesktop/DBus")
            bus.connect_to_signal("NameOwnerChanged",
                                  self.name_owner_changed,
                                  arg0="org.mpris.MediaPlayer2.spotify")

            try:
                self.loop = gobject.MainLoop()
                gobject.threads_init()
                self.loop.run()
            finally:
                print "Done"

    def name_owner_changed(self, name, before, after):
        print "Received NameOwnerChanged:"
        print "  {0} - {1} - {2}".format(name, before, after)

        if name == "org.mpris.MediaPlayer2.spotify":
            if after:
                for handler_class in self.handler_classes:
                    self.handlers.append(handler_class(self.session_bus))
            else:
                print "Shutting down"

                for handler in self.handlers:
                    handler.shutdown()

                self.loop.quit()

                print "Finished shutting down"


if __name__ == "__main__":
    handlers = [MediaKeysHandler, TelepathyHandler]

    try:
        from gi.repository import Notify
        from gi.repository import GObject as gobject
        handlers.append(NotificationsHandler)
    except:
        print "Disabling notifications"
        import gobject

    SpotifyGnome(handlers)
